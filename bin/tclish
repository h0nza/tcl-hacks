#!/usr/bin/env tclsh
#
# This is a basic interactive tclsh helper using getline for line-editing and completion.
#
# It needs a bit more snazz, eventually to be provided by:
#  - ../cli:  loading scripts, interactive helpers, repl scope
#  - ../procmap:  semi-intelligent completion
#
# History and Completion will get re-used in tksh (part of snot).
#
catch {source [file dirname [file dirname [file normalize [info script]/...]]]/../boot.tcl}

package require getline

namespace eval tclish {
    namespace path ::getline

    proc complete-word {s t} {
        regexp {([a-zA-Z0-9_:-]*)$} $s -> w
        if {$w eq ""} {return}
        set l [string length $w]
        set cs [info commands ${w}*]            ;# here's the dictionary!
        if {[llength $cs] == 1} {
            lassign $cs comp
            set comp [string range $comp [string length $w] end]
            return [list insert "$comp "]
        } else {
            set comp [common-prefix $cs]
            set comp [string range $comp [string length $w] end]
            if {$comp ne ""} {
                return [list insert $comp]
            } else {
                return [list flash-message $cs]     ;# FIXME: abbreviate
            }
        }
    }

    proc thunk {script {ns ::}} {
        list apply [list args $script $ns]
    }

    proc callback {cmd args} {
        set cmd [uplevel 1 [list namespace which $cmd]]
        list $cmd {*}$args
    }

    proc finally {script args} {
        set ns [uplevel 1 {namespace current}]
        set script "$script $args"
        tailcall trace add variable :#\; unset [list apply [list args $script $ns]]
    }

    proc atexit {script args} {
        set ns [uplevel 1 {namespace current}]
        set script "$script $args"
        trace add execution exit enter [thunk $script $ns]
    }


    proc lshift {_list} {
        upvar 1 $_list list
        if {[llength $list] == 0} {
            throw {LSHIFT EMPTY} "Attempt to shift an empty list!"
        }
        set list [lassign $list r]
        return $r
    }

    proc main {args} {

        set cmds {}
        while {[string match -* [lindex $args 0]]} {
            set arg [lshift args]
            switch $arg {
                -c { lappend cmds [lshift args] }
                -m { lappend cmds "package require [lshift args]" }
                -- { break }
            }
        }
        foreach script $args {
            lappend cmds [list source $script]
        }

        exec stty raw -echo <@ stdin
        finally {exec stty -raw echo <@ stdin}
        atexit  {exec stty -raw echo <@ stdin}  ;# finally might not be enough!

        set prompt "\[[info patch]\]% "

        Getline create getline \
                            -prompt $prompt \
                            -completer [callback complete-word] \
        ;#

        finally [callback getline destroy]

        foreach cmd $cmds {
            puts "# % $cmd"
            try {
                uplevel #0 $cmd
            } on ok {res opt} {
                if {$res eq ""} continue
                puts #\ [tty::attr bold][list $res][tty::attr]
            } on error {res opt} {
                puts #\ [tty::attr fg red bold]$res[tty::attr]
            }
        }

        while 1 {
            set input [getline getline]             ;# can return -code break/continue
            try {
                uplevel #0 $input
            } on ok {res opt} {
                if {$res eq ""} continue
                puts [tty::attr bold]\ [list $res][tty::attr]
            } on error {res opt} {
                puts [tty::attr fg red bold]\ $res[tty::attr]
            }
        }
        puts ""
    }

    coroutine Main try {
        tclish::main {*}$::argv
        exit
    }
    vwait forever
}
